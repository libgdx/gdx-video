apply plugin: 'maven-publish'
apply plugin: 'signing'

afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = 'com.badlogicgames.gdx-video'
                artifactId = project.name

                pom {
                    name.set(rootProject.name)
                    description.set('Video Extension for libGDX')
                    url.set('https://github.com/libgdx/gdx-video')

                    scm {
                        url.set('scm:git@github.com:libgdx/gdx-video.git')
                        connection.set('scm:git@github.com:libgdx/gdx-video.git')
                        developerConnection.set('scm:git@github.com:libgdx/gdx-video.git')
                    }

                    licenses {
                        license {
                            name.set('The Apache Software License, Version 2.0')
                            url.set('http://www.apache.org/licenses/LICENSE-2.0.txt')
                            distribution.set('repo')
                        }
                    }

                    developers {
                        developer {
                            id.set('SimonIT')
                            name.set('Simon Bullik')
                            email.set('simonit.orig@gmail.com')
                        }
                    }
                }

                from components.java
            }
        }
    }

    signing {
        if (isReleaseBuild()) {
            useGpgCmd()
        }
        required { isReleaseBuild() }
        sign configurations.archives
    }

    tasks.register('libraryJar', Jar) {
        dependsOn classes
        from sourceSets.main.output.classesDirs
        from configurations.custom.collect { it.isDirectory() ? it : zipTree(it) }
        classifier = 'library'
    }

    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    tasks.register('nativesJar', Jar) {
        dependsOn classes
        from fileTree("libs").files
        classifier = 'natives'
    }

    artifacts {
        //archives libraryJar
        //archives nativesJar
        archives sourcesJar
        archives javadocJar
    }
}