apply plugin: "java-library"

apply from: '../publish.gradle'

targetCompatibility = 1.7
sourceCompatibility = 1.7

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
    }
}

configurations {
    custom
    compile.extendsFrom custom
}

dependencies {
    api project(":gdx-video-core")
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

tasks.register('cleanFFmpeg')
clean.configure {
    dependsOn 'cleanFFmpeg'
}

tasks.register('patchFFmpeg') {
    doFirst {
        println(System.getenv("PATH"))
    }
}

import com.badlogic.gdx.jnigen.BuildTarget;

String checkCrossPrefix(String crossToolchain) {
    if (crossToolchain == null) return
    def result = project.exec {
        ignoreExitValue = true
        commandLine "bash", "-l", "-c", "command", "-v", "$crossToolchain-gcc"
    }
    if(result.getExitValue() == 0) {
        return "$crossToolchain-"
    }
}

String genLibs(String buildDir) {
    String libs = "";
    String absPath = file("FFmpeg/$buildDir").absolutePath
    libs += " -L$absPath/libavcodec"
    libs += " -L$absPath/libavformat"
    libs += " -L$absPath/libavutil"
    libs += " -L$absPath/libswscale"
    libs += " -L$absPath/libswresample"
    return libs
}

void registerBuild(String buildName, String crossToolchain, String... extraArgs) {
    registerBuild(buildName, crossToolchain, extraArgs.toList()) {}
}

void registerBuild(String buildName, String crossToolchain, List<String> extraArgs, Action<BuildTarget> jniOptions) {
    String buildDir = "FFmpeg/build-${buildName.toLowerCase()}"
    tasks.register("cleanFFmpeg$buildName", Delete) {
        delete buildDir
    }
    cleanFFmpeg.configure {
        dependsOn "cleanFFmpeg$buildName"
    }
    tasks.register("buildFFmpeg$buildName") {
        dependsOn patchFFmpeg
        doFirst {
            mkdir buildDir
            String[] crossArgs = []
            def crossPrefix = checkCrossPrefix(crossToolchain)
            if(crossPrefix) {
                crossArgs = ["--enable-cross-compile", "--cross-prefix=$crossPrefix"]
            }
            project.exec {
                workingDir buildDir
                executable '../configure'
                args '--enable-pic', '--disable-symver', '--disable-doc', '--disable-shared', '--enable-static', '--disable-everything'
                args crossArgs
                args '--enable-protocol=file', '--enable-filter=aresample', '--enable-filter=deshake'
                args '--enable-demuxer=ogg', '--enable-demuxer=matroska'
                args '--enable-decoder=vorbis', '--enable-decoder=opus'
                args '--enable-decoder=vp8', '--enable-decoder=vp9', '--enable-decoder=theora', '--enable-decoder=av1'
                //args '--enable-demuxer=mov', '--enable-decoder=aac', '--enable-decoder=h264'
                args extraArgs
            }
            project.exec {
                workingDir buildDir
                commandLine 'make', '-j'
            }
        }
        outputs.upToDateWhen { file("$buildDir/libavformat/libavformat.a").exists() }
    }
    jnigen {
        def is64bit = buildName.endsWith("64")
        def isArm = buildName.contains("ARM")
        def osMap = [
            W: Windows,
            L: Linux,
            M: MacOsX
        ]
        def targetOs = osMap.get(buildName.substring(0, 1))
        add(targetOs, is64bit, isArm) {
            headerDirs += "../$buildDir"
            libraries += genLibs(buildDir)
            def crossPrefix = checkCrossPrefix(crossToolchain)
            if(crossPrefix) {
                compilerPrefix = crossPrefix
            }
            jniOptions
        }
    }
}

jnigen {
    sharedLibName = "gdx-video-desktop"
    all {
        headerDirs = ["../FFmpeg"]
        cFlags += " -fvisibility=hidden "
        cppFlags += " -fvisibility=hidden "
        //Using `-lavcodec -lavformat` order on linux drops filesize by half but mingw wont compile???
        libraries += " -lavformat -lavcodec -lavutil -lswscale -lswresample -lpthread "
    }
}

registerBuild('Windows32', 'i686-w64-mingw32', ['--arch=x86', '--target-os=mingw32']) {
    cppFlags += " -DWIN32 "
}
registerBuild('Windows64', 'x86_64-w64-mingw32', ['--arch=x86_64', '--target-os=mingw32']) {
    cppFlags += " -DWIN32 "
}

registerBuild 'Linux32', 'i686-linux-gnu', '--arch=i686', '--target-os=linux', '--extra-cflags="-m32"', '--extra-cxxflags="-m32"', '--extra-ldflags="-m32"'
registerBuild 'Linux64', 'x86_64-linux-gnu', '--arch=x86_64', '--target-os=linux', '--disable-cuda', '--disable-cuvid', '--disable-asm'

registerBuild 'LinuxARM32', 'arm-linux-gnueabihf', '--arch=arm', '--target-os=linux'
registerBuild 'LinuxARM64', 'aarch64-linux-gnu', '--arch=aarch64', '--target-os=linux'

registerBuild('Macos64', null, ['--cc=clang', '--cxx=clang++', '--arch=x86_64', '--target-os=darwin', '--disable-asm']) {
    libraries += " -liconv -lbz2 -lz "
}
registerBuild('MacosARM64', null, ['--cc=clang', '--cxx=clang++', '--arch=arm64', '--target-os=darwin']) {
    libraries += " -liconv -lbz2 -lz "
}

tasks.register('buildFFmpeg') {
    dependsOn buildFFmpegWindows32, buildFFmpegWindows64, buildFFmpegLinux32, buildFFmpegLinux64, buildFFmpegLinuxARM32, buildFFmpegLinuxARM64
}

jar {
    from fileTree("libs").files
}

eclipse.project {
    name = projectGroup + "-desktop"
}
