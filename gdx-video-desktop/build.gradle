apply plugin: "java-library"

apply from: '../publish.gradle'

targetCompatibility = 1.7
sourceCompatibility = 1.7

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
    }
}

configurations {
    custom
    compile.extendsFrom custom
}

dependencies {
    api project(":gdx-video-core")
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

tasks.register('cleanFFmpeg')
clean.configure {
    dependsOn 'cleanFFmpeg'
}

tasks.register('patchFFmpeg') {
    doFirst {
        println(System.getenv("PATH"))
    }
}

void registerBuild(String buildName, String crossToolchain, String... extraArgs) {
    String buildDir = "FFmpeg/build-${buildName.toLowerCase()}"
    tasks.register("cleanFFmpeg$buildName", Delete) {
        delete buildDir
    }
    cleanFFmpeg.configure {
        dependsOn "cleanFFmpeg$buildName"
    }
    tasks.register("buildFFmpeg$buildName") {
        dependsOn patchFFmpeg
        doFirst {
            mkdir buildDir
            String[] crossArgs = []
            if(crossToolchain != null) {
                def result = project.exec {
                    ignoreExitValue = true
                    commandLine "bash", "-l", "-c", "command", "-v", "$crossToolchain-gcc"
                }
                if(result.getExitValue() == 0) {
                    crossArgs = ["--enable-cross-compile", "--cross-prefix=$crossToolchain-"]
                }
            }
            project.exec {
                workingDir buildDir
                executable '../configure'
                args '--enable-pic', '--disable-symver', '--disable-doc', '--disable-shared', '--enable-static', '--disable-everything'
                args crossArgs
                args '--enable-protocol=file', '--enable-filter=aresample', '--enable-filter=deshake'
                args '--enable-demuxer=ogg', '--enable-demuxer=matroska', '--enable-demuxer=mov'
                args '--enable-decoder=vorbis', '--enable-decoder=opus', '--enable-decoder=aac'
                args '--enable-decoder=vp8', '--enable-decoder=vp9', '--enable-decoder=theora', '--enable-decoder=h264'
                args extraArgs
            }
            project.exec {
                workingDir buildDir
                commandLine 'make', '-j'
            }
        }
        outputs.upToDateWhen { file("$buildDir/libavformat/libavformat.a").exists() }
    }
}

registerBuild 'Windows32', 'i686-w64-mingw32', '--arch=x86', '--target-os=mingw32'
registerBuild 'Windows64', 'x86_64-w64-mingw32', '--arch=x86_64', '--target-os=mingw32'

registerBuild 'Linux32', 'i686-linux-gnu', '--arch=i686', '--target-os=linux', '--extra-cflags="-m32"', '--extra-cxxflags="-m32"', '--extra-ldflags="-m32"'
registerBuild 'Linux64', 'x86_64-linux-gnu', '--arch=x86_64', '--target-os=linux', '--disable-cuda', '--disable-cuvid', '--disable-asm'

registerBuild 'LinuxARM32', 'arm-linux-gnueabihf', '--arch=arm', '--target-os=linux'
registerBuild 'LinuxARM64', 'aarch64-linux-gnu', '--arch=aarch64', '--target-os=linux'

registerBuild 'Macos64', null, '--enable-cross-compile', '--cc=clang', '--cxx=clang++', '--arch=x86_64', '--target-os=darwin', '--disable-asm'
registerBuild 'MacosARM64', null,  '--cc=clang', '--cxx=clang++', '--arch=arm64', '--target-os=darwin'


tasks.register('buildFFmpeg') {
    dependsOn buildFFmpegWindows32, buildFFmpegWindows64, buildFFmpegLinux32, buildFFmpegLinux64, buildFFmpegLinuxARM32, buildFFmpegLinuxARM64
}

ext.genLibs = { build ->
	String libs = "";
	libs += " -L" + file("FFmpeg/build-"+build+"/libavcodec").absolutePath
	libs += " -L" + file("FFmpeg/build-"+build+"/libavformat").absolutePath
	libs += " -L" + file("FFmpeg/build-"+build+"/libavutil").absolutePath
	libs += " -L" + file("FFmpeg/build-"+build+"/libswscale").absolutePath
	libs += " -L" + file("FFmpeg/build-"+build+"/libswresample").absolutePath
    return libs
}

jnigen {
    sharedLibName = "gdx-video-desktop"
    all {
        headerDirs = ["../FFmpeg"]
        cFlags += " -fvisibility=hidden "
        cppFlags += " -fvisibility=hidden "
        //Using `-lavcodec -lavformat` order on linux drops filesize by half but mingw wont compile???
        libraries += " -lavformat -lavcodec -lavutil -lswscale -lswresample -lpthread "
    }
    add(Windows, x32) {
        headerDirs += "../FFmpeg/build-windows32/"
        cppFlags += " -DWIN32 "
        libraries += genLibs("windows32")
    }
    add(Windows, x64) {
        headerDirs += "../FFmpeg/build-windows64/"
        cppFlags += " -DWIN32 "
        libraries += genLibs("windows64")
    }
    add(Linux, x32) {
        headerDirs += "../FFmpeg/build-linux32/"
        libraries += genLibs("linux32")
        compilerPrefix = 'i686-linux-gnu-'
    }
    add(Linux, x64) {
        headerDirs += "../FFmpeg/build-linux64/"
        libraries += genLibs("linux64")
        compilerPrefix = 'x86_64-linux-gnu-'
    }
    add(Linux, x32, ARM) {
        headerDirs += "../FFmpeg/build-linuxarm32/"
        libraries += genLibs("linuxarm32")
    }
    add(Linux, x64, ARM) {
        headerDirs += "../FFmpeg/build-linuxarm64/"
        libraries += genLibs("linuxarm64")
    }
    add(MacOsX, x64) {
        headerDirs += "../FFmpeg/build-macos64/"
        libraries += genLibs("macos64") + " -liconv -lbz2 -lz "
    }
    add(MacOsX, x64, ARM) {
        headerDirs += "../FFmpeg/build-macosarm64/"
        libraries += genLibs("macosarm64") + " -liconv -lbz2 -lz "
    }
}

jar {
    from fileTree("libs").files
}

eclipse.project {
    name = projectGroup + "-desktop"
}
